input {
    beats {
        port => "5043"
    }
}
filter {
    # For now, we have reactomews and everything else is assumed to come from reactome.org
    if [source] =~ ".*reactomews.*" {
        mutate {
            add_field => {"reactome_server" => "reactomews"}
        }
    }
    else {
        mutate {
            add_field => {"reactome_server" => "reactome.org"}
        }
    }
    # Fingerprint to avoid duplicate messages
    fingerprint {
        source => "message"
        target => "[@metadata][fingerprint]"
        method => "MURMUR3"
    }
    # Parse Apache log message.
    if [reactome_server] == "reactome.org" {
        grok {
          match => { "message" => ["%{COMBINEDAPACHELOG}"] }
          tag_on_failure => ["grok_not_COMBINEDAPACHELOG"]
        }
    }
    else if [reactome_server] == "reactomews" {
        grok {
          match => { "message" => ["%{COMMONAPACHELOG}"] }
          tag_on_failure => ["grok_not_COMMONAPACHELOG"]
        }
    }
    # extract date from logfile and set it as a proper "date" field, so it can be indexed and used instead the default timestamp.
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@apache_timestamp"
    }

    # decode encoded values in the message, request, and referrer.
    # Do this AFTER parsing the message as an Apache log message.
    # Otherwise, decoded characters might break the regex.
    urldecode {
        field => "message"
        tag_on_failure => ["_urldecodefailure_message"]
    }
    urldecode {
        field => "request"
        tag_on_failure => ["_urldecodefailure_request"]
    }
    urldecode {
        field => "referrer"
        tag_on_failure => ["_urldecodefailure_referrer"]
    }
    # Previously, this was done with a scripted field, but I think that was too slow.
    if [response]
    {
        ruby {
            code => ' event.set("http_code_category", event.get("response")[0]+"xx" ) '
        }
    }
    # Now, extract some specific date fields, so that they can be used in reports.
    # Sometimes I see 'Ruby exception occurred: no time information in ""' in the logs.
    # I don't know how it gets there but if there's a problem with @apache_timestamp,
    # let's detect it and tag the event appropriately.
    if [@apache_timestamp]
    {
        ruby {
            code => ' event.set("dayOfWeek", Time.parse(event.get("@apache_timestamp").to_s).strftime("%w - %A"))
                      event.set("weekOfYear", Time.parse(event.get("@apache_timestamp").to_s).strftime("%U")) '
        }
    }
    else
    {
        mutate {
            add_tag => ["ERR_on_apache_timestamp"]
        }
    }
    grok {
      match => { "message" => ["^.*%{MONTHDAY:dayOfMonth}\/%{MONTH:monthName}\/%{YEAR:year}:(?!<[0-9])%{HOUR:hourOfDay}:%{MINUTE}(?::%{SECOND})(?![0-9]) %{INT:utcOffset}.*$"] }
    }
    # Extract URL parameters from the "request" field.
    grok {
        match => [ "request", "%{URIPARAM:url}" ]
        tag_on_failure => ["grok_no_URIPARAM"]
    }
    # Add a field to indicate a request came from an internal IP address (relative to the server)
    # These requests are probably coming from other Reactome servers, OR from OICR staff.
    if [clientip] {
        cidr {
            add_field => {"internal_IP" => true }
            address => [ "%{clientip}" ]
            network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "::1", "::", "127.0.0.1", "0.0.0.0" ]
        }
    }
    # Process the referrer URL
    grok {
        patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
        match => ["referrer", "%{REFERRER_URL}"]
        tag_on_failure => ["grok_referrer_parse_err"]
    }
    # Now, let's see if we can determine the *type* of the referrer
    if [referrer_domain] {
        if [referrer_domain] =~ /(?i)^(www\.)?reactome.*/ or [internal_IP] {
            mutate {
                add_field => {"referrer_type" => "SELF" }
            }
        }
        else
        {
            # grok the REFERRER_DETAILS pattern to determine which type of referrer this was.
            # Referrer types:
            # SocialMeida, SearchEngine, Peer (a list of domain names that have been decided as "peers"), Other (doesn't fit into these other categories).
            # There is also SELF, which means the referrer was reactome.org; and Direct, which means there was no
            # Referrer information.
            grok {
                patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
                match => ["referrer_domain", "%{REFERRER_DETAILS}"]
                tag_on_failure => ["grok_referrer_details_parse_err"]
            }
            if [referrer_social_media_domain] {
                mutate {
                    add_field => {"referrer_type" => "SocialMedia" }
                }
            }
            else if [referrer_search_engine_domain] {
                mutate {
                    add_field => {"referrer_type" => "SearchEngine" }
                }
            }
            else if [referrer_peer_domain] {
                mutate {
                    add_field => {"referrer_type" => "Peer" }
                }
            }
            else {
                mutate {
                    add_field => {"referrer_type" => "Other" }
                }
            }
        }
    }
    else {
        # "Direct" means the user went directly to the page requested - either by typing
        # or copy/pasting it into their browser, or by clicking a bookmark.
        mutate {
            add_field => {"referrer_type" => "Direct" }
        }
    }
    # Extract Reactome stable identifier information from the "request" field
    grok {
        patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
        match => [ "request" , "%{STABLE_IDENTIFIER:reactome_stable_identifier}"]
        tag_on_failure => ["grok_no_reactome_stable_identifier"]
    }
    # Extract the name of the Reactome Application that was requested (could return null)
    grok {
        match => ["request", "%{REACTOME_APPLICATION:reactome_application}"]
        patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
        tag_on_failure => ["grok_no_reactome_application"]
    }
    if [reactome_application] =~ /(?i)\/?reactomerestfulapi/ {
        grok {
            match => ["request", "%{RESTFUL_API_PATH}"]
            patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
            tag_on_failure => ["grok_parse_fail_RESTfulAPI_path"]
        }
    }
    if [reactome_application] =~ /(?i)\/?contentservice/ {
        grok {
            match => ["request", "%{CONTENT_SERVICE_PATH}"]
            patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
            tag_on_failure => ["grok_parse_fail_ContentService_path"]
        }
    }
    if [reactome_application] =~ /(?i)\/?analysisservice/ {
        grok {
            match => ["request", "%{ANALYSIS_SERVICE_PATH}"]
            patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
            tag_on_failure => ["grok_parse_fail_AnalysisService_path"]
        }
    }
    if [reactome_application] =~ /(?i)\/?cgi-bin/ {
        grok {
            match => ["request", "%{CGI_SCRIPT_NAME}"]
            patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
            tag_on_failure => ["grok_parse_fail_CGIScipt"]
        }
    }
    # Get the download file name, and also clean up the reactome_application field
    # because the filename is probably in it.
    if [reactome_application] =~ /(?i)\/?download\/current\//
        and [reactome_application] !~ /(?i)\/?download\/current\/(fireworks|diagram)/ {

        mutate {
            replace => { "reactome_application" => "/download/current/" }
        }
        grok {
            match => ["request", "%{DOWNLOAD_FILE}"]
            patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
            tag_on_failure => ["grok_parse_fail_DownloadFileName"]
        }
    }
    if [reactome_application] =~ /(?i).*caBigR3WebApp.*/ {
        grok {
            match => ["request", "%{CABIGR3WEBAPP_PATH}"]
            patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
            tag_on_failure => ["grok_parse_fail_CABIGR3WEBAPP_PATH"]
        }
    }
    if [reactome_application]
    {
        mutate
        {
            lowercase => [reactome_application]
        }
    }
    # transform the bytes field to an integer so Kibana can do SUM on it. Also clean up the URL a bit.
    # Also: convert certain date fields to numbers, so they can be used in histograms.
    # Also: The string "<=>" is found in some queries after "request" is URL-decoded. But... this can
    # cause the kv filter to split on the "=" and create keys and values. So we convert that back to &lt;&#61;&gt;
    # and then there is another mutate filter after kv which will revers this mutation.
    mutate {
        convert => {"bytes" => "integer"}
        convert => {"dayOfMonth" => "integer"}
        convert => {"hourOfDay" => "integer"}
        convert => {"year" => "integer"}
        convert => {"weekOfYear" => "integer"}
        gsub => [
                "url","&amp;","&",
                "url","&amp%3B","&",
                "url","amp%3B","&",
                "url","%3B",";",
                "url","&amp","&",
                "url","%230","",
                "url","load%5B%5D","load",
                "url",";amp;id","id",
                "url","VALUE#0","VALUE",
                "url","OPERATOR#0","OPERATOR",
                "url","ATTRIBUTE#0","ATTRIBUTE",
                "request","<=>","&lt;&#61;&gt;",
                "request","=>","&#61;&gt;",
                "request","<=","&lt;&#61;"
                ]
    }

    # process the useragent information
    useragent {
      source => "agent"
      target => "useragent"
    }
    # Add a field to make it easier to find messages from bots.
    grok {
        patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
        match => ["useragent", "%{BOT}"]
        tag_on_failure => ["grok_BOT_parse_fail"]
        add_field => {"probably_a_bot" => true }
    }

    # Extract key-value pairs from URL string and index the keys, but only if they are REACTOME keys.
    # Ignore when the referrer is a search engine.
    # Be aware that sometimes the referrer might look like "http://www.google.com/url=http://reactome.org/blah-blahblah"
    # Also ignore when referrer is WordPress admin or Joomla admin (we don't need to index those keys for log analysis)
    # Also: do not perform KV processing when request is from a bot - too much potential junk in requests from bots.
    # Also: Don't bother with KV processing if the request is just for favicon or something trivial like that.
    # How about this: ONLY bother with KV processing for known Reactome Applications? Should simplify things by a lot!
    if ![probably_a_bot] and [reactome_application] and ([request] !~ ".*<script.*" and [request] !~ ".*script>.*")
        and [request] !~ ".*css\?v.*" and [request] !~ ".*js\?v.*"
        and ([request] !~ "^\/favicon.ico$"
            and [request] !~ "^\/icons\/search\/Pathway\.gif$"
            and [request] !~ "^\/images\/spinner\.gif$"
            and [request] !~ "^\/stylesheet\.css$"
            and [request] !~ ".*getTags\?tagName=http.*"
            and [request] !~ ".*cache\.js\?.*"
            and [request] !~ ".*\?q=http.*")
        and ([referrer_type] != "SearchEngine" and [referrer_type] != "SocialMedia"
            and [referrer] !~ "wp-admin" and [referrer] !~ "wordpress" and [referrer] !~ "\/administrator\/index.php"
            and [request] !~ "wp-admin" and [request] !~ "wordpress" and [request] !~ "\/administrator\/index.php")
    {
        kv {
            source => "url"
            field_split => "&"
            trim_key => "\?"
            transform_key => "lowercase"
            prefix => "_kv_"
        }
    }

    prune {
        # a list of keys we want to prune. This list may grow over time.
        blacklist_names => [".*(z|Z)(o|O|0){2}(m|M).*","(_kv_)?xml_sitemap",
            "(_kv_)?toolbar", "(_kv_)?treeView", "_fp[0-9]+","^(\'(A|a))$","_sm_au_",".*<script>.*",
            "^(_kv_)?width$", "^(_kv_)?height$","_wpnonce","<meta%20http-equiv","document_srl","conversation(C|c)ontext",
            "^(_kv_)?do$", "^(_kv_)?mod$", "^(_kv_)?op$", "pwb_redirect", "submit(search)?", "^(_kv_)?task$", "^(_kv_)?view(image)?$",
            "^(_kv_)?keyword$", "^(_kv_)?dopost$", "^(_kv_)?fmdo$", "^(_kv_)?array$", "c@@\.12c\.c@\.\(c\)\(c\(", "inslockfile", "install_demo_name",
            "^(_kv_)?s_lang$", "isappinstalled", "^(_kv_)?coppa$", "^(_kv_)?agreed$", "^(_kv_)?fid$", "mod(e)?", "visitdsttime", "preview_nonce",
            "^(_kv_)?usg$", "^(_kv_)?ved$", "^(_kv_)?sa$", "tbpm", "s,ql",".*sbmlretrieval\/allforms\?speciesid.*", "redlink",
            "nsukey","^(_kv_)?ll$", "maxadcountsperinterval", "method:#_memberaccess%\.url",
            "infloat", "inajax", "ajaxmenu", "handlekey", "gf_page", "^(_kv_)?fid$", "entryac",
            "cssreloader2345", "cperpage", "classic", "chvzaa", "bustype", "beacon", "adcountintervalhours",
            "^(_kv_)?1$", "^(_kv_)?4$", "^(_kv_)?2$", "stichwort", "wx_fmt", "phpinfo", "agreed",
            "^(_kv_)?pg$", "arubalp", "arrs\d", "^(_kv_)?highlight$", "imagefield\.(x|y)", "blast_rank",
            "^(_kv_)?rid$", "log\$", "route", "rqid", "subid", "affiliate", "justshown", "^anx.+",
            "cfg_(basedir|imgtype|mediatype|not_allowall||softtype)", "^(_kv_)?drv$", "^(_kv_)?sz$", "^(_kv_)?ti$",
            "^(_kv_)?(c|C)(7|9)$", "^(_kv_)?oe$", "^(_kv_)?channel$", "^(_kv_)?gfe_rd$", "^(_kv_)?1\'$", "^(_kv_)?o$", "^(_kv_)?oh$", "^(_kv_)?efg$",
            ".*\+{2,}.*", "^(_kv_)?db\/cgi-bin\/instancebrowser\?db$", "^(_kv_)?(json(p(-|_)?)?)?callback$", "^(_kv_)?dir(_inc)?$",
            "crazycache", "cn","fl", "rev", "kb_tick", "j24a75", "wb48617274", "x9wj", "ei", "foo",
            "\'\/\*\*\/\'", "-d\+allow_url_include", "132\?cmd", "^(_kv_)?;.+",
            "fbclid", "nslookup_button", "^(_kv_)?s?http:\/\/.*", "^(_kv_)?ie$", "^(_kv_)?iid$", "name\.\#.*",
            "queryb64str", "qrahfyhjkjaasc6j", "$^(_kv_)puid$", "patcher\?cmd", "sla6pddys", "yyue",
            "^(_kv_)?at[0-9]+$", ".*convert\(.*", ".*(\(|\)).*", "(_kv_)?#$", ".*9,\+9,\+9", ".*9ehhdszt",
            ".*%.*", ".*(x|y)_(mag|offset)", ".*sp\.nextform", "^(_kv_)?skin$", "(_kv_)?sg$", ".*redirect:\$\{\#a.*",
            ".*R0BPnN9T.*", "^(_kv_)?php.*", "^(_kv_)?pollvars.*", ".*new(lang|page|remember|username).*",
             ]

        blacklist_values => [ ".*", "<\/123"]
    }

    mutate {
        gsub => [
                "request","&lt;&#61;&gt;","<=>",
                "request","&#61;&gt;","=>",
                "request","&lt;&#61;","<="
                ]
    }

    # IP-based geolocation.
    if [clientip] {
        geoip {
          source => "clientip"
        }
    }
    grok {
        match => ["request", "%{NONPAGEVIEW_FILES}"]
        patterns_dir => ["/usr/share/logstash/pipeline/patterns/"]
        tag_on_failure => ["grok_file_extension_test_parse_fail"]
    }
    # Check to see if this was a possible "page view" (exclude bots and requests coming from the same server)
    # header.php and footer.php are PHP files but should *not* count as page views (they're not really pages).
    # Also check that reactome_nonpage_file_extension does not exist because pageviews won't end with a "non-page" file extension (such as css, jpg, etc...)
    if ![probably_a_bot] and ![internal_IP] and ![reactome_nonpage_file_extension] and [request] !~ "header.php" and [request] !~ "footer.php" {
        mutate {
            add_field => {"probably_not_a_page_view" => false }
        }
    }
    else {
        mutate {
            add_field => {"probably_not_a_page_view" => true }
        }
    }
    # If we got this far and there is no "probably_a_bot" field, we'll create
    # one and set it to FALSE. This makes it easier to report on this field, since
    # it will exist no matter what. Of course, some of our reports may need to
    # be updated...
    # if ![probably_a_bot]
    # {
    #     mutate {
    #         add_field => {"probably_a_bot" => true }
    #     }
    # }
    if [probably_a_bot] {
        mutate {
            convert => {"probably_a_bot" => "boolean"}
        }
    }
    if [probably_not_a_page_view] {
        mutate {
            convert => {"probably_not_a_page_view" => "boolean"}
        }
    }
    if [internal_IP] {
        mutate {
            convert => {"internal_IP" => "boolean"}
        }
    }
    mutate {
        lowercase => [ "monthName" ]
    }
    # let's create a field to indicate if a log message came from Programmatic Access
    # The query in Elastic looks like this:
    # (useragent.name:/(p|P)ytho.*/  ||  useragent.name:/(J|j)ava.*/  ||  useragent.name:/(P|p)erl.*/ || useragent.name:Other || useragent.name:/.*(c|C)url.*/ || useragent.name:/.*(W|w)get.*/)  && !internal_IP:true && !referrer_type:SELF
    # if ([useragent.name] ~= /(p|P)ytho.*/ or [useragent.name] ~= /(J|j)ava.*/
    #     or [useragent.name] ~= /(P|p)erl.*/ or [useragent.name] ~= Other
    #     or [useragent.name] ~= /.*(c|C)url.*/ or [useragent.name] ~= /.*(W|w)get.*/)
    #     and (![internal_IP] or [internal_IP] == false)
    #     and ![referrer_type] == "SELF"
    # {
    #     mutate {
    #         add_field => {"programmatic_access" => true}
    #     }
    #     # Should we do a DNS reverse lookup on the IP address to get a
    #     # better idea of who the heavy programmatic-access users are?
    #     # it would probably slow down the pipeline
    #     # https://www.elastic.co/guide/en/logstash/current/plugins-filters-dns.html#plugins-filters-dns-reverse
    # }
    # else {
    #     mutate {
    #         add_field => {"programmatic_access" => false}
    #     }
    # }
    # mutate {
    #     convert => {"programmatic_access" => "boolean"}
    # }
}
output {
    if [reactome_server] == "reactomews" {
        elasticsearch {
            hosts => ["esserver:9200"]
            index => "reactomews-%{[monthName]}-%{[year]}"
            document_id => "%{[@metadata][fingerprint]}"
        }
    }
    else {
        elasticsearch {
            hosts => ["esserver:9200"]
            index => "reactome-main-%{[monthName]}-%{[year]}"
            document_id => "%{[@metadata][fingerprint]}"
        }
    }
}
