version: '3'

# Generate self-signed certs with:
# openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
# openssl req -new -key key.pem -x509 -days 1000 -out CA-cert.pem

# # Generating certificates: https://opendistro.github.io/for-elasticsearch-docs/docs/security-configuration/generate-certificates/
# # First two commands result in root CA file: root-ca.pem
# openssl genrsa -out root-ca-key.pem 2048
# openssl req -new -x509 -sha256 -key root-ca-key.pem -out root-ca.pem
# # Next few commands generate key (admin-key.pem) and certificate (admin.pem)
# openssl genrsa -out admin-key-temp.pem 2048
# openssl pkcs8 -inform PEM -outform PEM -in admin-key-temp.pem -topk8 -nocrypt -v1 PBE-SHA1-3DES -out admin-key.pem
# openssl req -new -key admin-key.pem -out admin.csr
# openssl x509 -req -in admin.csr -CA root-ca.pem -CAkey root-ca-key.pem -CAcreateserial -sha256 -out admin.pem
# #...
# #Then export JAVA_HOME=/usr/share/elasticsearch/jdk
# #Then run: /usr/share/elasticsearch/plugins/opendistro_security/tools/securityadmin.sh -h esserver -p 9300 -cd ../securityconfig/ -icl -nhnv -cacert ../../../config/root-ca.pem -cert ../../../config/admin.pem -key ../../../config/admin-key.pem
# Maybe try: $JAVA_HOME/bin/keytool -importcert -keystore ../../../config/elasticsearch.keystore   -storepass changeit  -file ../../../config/root-ca.pem
#
# From the command line (without entering the container interactively):
#    docker exec elk_esserver_1 /bin/bash /usr/share/elasticsearch/plugins/opendistro_security/tools/securityadmin.sh -h esserver -p 9300 -cd /usr/share/elasticsearch/plugins/opendistro_security/securityconfig/ -icl -nhnv -cacert /usr/share/elasticsearch/config/root-ca.pem -cert /usr/share/elasticsearch/config/admin.pem -key /usr/share/elasticsearch/config/admin-key.pem
services:
    esserver:
        hostname: esserver
        # image: docker.elastic.co/elasticsearch/elasticsearch:7.6.1
        build:
          context: .
          dockerfile: elasticsearch.dockerfile
        volumes:
            - "./esdata:/usr/share/elasticsearch/data/"
            - "./admin-key.pem:/usr/share/elasticsearch/config/admin-key.pem:ro"
            - "./admin.pem:/usr/share/elasticsearch/config/admin.pem:ro"
            - "./root-ca.pem:/usr/share/elasticsearch/config/root-ca.pem:ro"
            - "./internal_users.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml"
            - "./roles.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles.yml"
            # - "./roles_mapping.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles_mapping.yml"
            - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        environment:
            - cluster.name=reactome-elk
            - discovery.type=single-node
            - node.name=reactome-node-1
            - network.host=_site_
            - "ES_JAVA_OPTS=-Xms4g -Xmx20g"
            - "path.repo=/usr/share/elasticsearch/data/backups"
            - "search.max_buckets=1000000"
            - "JAVA_HOME=/usr/share/elasticsearch/jdk"
        ports:
            - "9200:9200"
            - "9300:9300"
        # command: /usr/local/bin/docker-entrypoint.sh /bin/bash -c "/usr/share/elasticsearch/eswrapper && cd /usr/share/elasticsearch/plugins/opendistro_security/tools && ./securityadmin.sh -h esserver -p 9300 -cd ../securityconfig/ -icl -nhnv -cacert ../../../config/root-ca.pem -cert ../../../config/admin.pem -key ../../../config/admin-key.pem"

    kibserver:
        # image: docker.elastic.co/kibana/kibana:7.6.1
        build:
          context: .
          dockerfile: kibana.dockerfile
        volumes:
            - "./kibana.yaml:/usr/share/kibana/config/kibana.yml"
            - "./kibanadata:/usr/share/kibana/data"
            - "./root-ca.pem:/usr/share/kibana/config/root-ca.pem:ro"
            - "./admin.pem:/usr/share/kibana/config/admin.pem:ro"
            - "./admin-key.pem:/usr/share/kibana/config/admin-key.pem:ro"
        depends_on:
            - esserver
        ports:
            - 5601:5601
        # environment:
        #     ELASTICSEARCH_URL: https://esserver:9200
        #     ELASTICSEARCH_HOSTS: https://esserver:9200

    logstash_server:
        build:
            context: .
            dockerfile: logstash.dockerfile
        volumes:
            - "./logstash.opts:/etc/init.d/logstash"
            - "./logstash.yaml:/usr/share/logstash/config/logstash.yml"
            - "./pipeline.conf:/usr/share/logstash/pipeline/logstash.conf"
            - "./logstash.patterns:/usr/share/logstash/pipeline/patterns/logstash.patterns"
            - "./analysis_service.patterns:/usr/share/logstash/pipeline/patterns/analysis_service.patterns"
            - "./content_service.patterns:/usr/share/logstash/pipeline/patterns/content_service.patterns"
            - "./referrers.patterns:/usr/share/logstash/pipeline/patterns/referrers.patterns"
            - "./logstashqueue:/var/queue"
            - "./ips_with_usage_types.csv:/ips.csv"
            - "./root-ca.pem:/etc/elasticsearch/certs/ca/root-ca.pem:ro"
        ports:
            - "5043:5043"
        depends_on:
            - esserver
        environment:
             - "LS_OPTS=--quiet"
             - LS_JAVA_OPTS=-Xmx3g
# Run `sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./server.key -out ./server.crt` to create self-signed certificates for local testing.
# Run `sudo htpasswd -c ./.htpasswd admin` to create the password file.
    # nginx:
    #     depends_on:
    #         - esserver
    #         - kibserver
    #     links:
    #         - kibserver
    #     image: nginx:1.17.4-alpine
    #     ports:
    #         - 6601:6601
    #     environment:
    #         - NGINX_PORT=6601
    #     volumes:
    #         - "./nginx.conf:/etc/nginx/nginx.conf:ro"
    #         - "./server.crt:/etc/nginx/conf.d/server.crt"
    #         - "./server.key:/etc/nginx/conf.d/server.key"
    #         - "./.htpasswd:/etc/nginx/conf.d/.htpasswd"
