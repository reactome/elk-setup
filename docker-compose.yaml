version: '3'

# See the README.md file for instructions on how to generate the key and
# certificate files, as well as instructions on how to set up the security
# plugin.

services:
    esserver:
        hostname: esserver
        build:
          context: .
          dockerfile: elasticsearch.dockerfile
        volumes:
            - "./esdata:/usr/share/elasticsearch/data/"
            - "./admin-key.pem:/usr/share/elasticsearch/config/admin-key.pem:ro"
            - "./admin.pem:/usr/share/elasticsearch/config/admin.pem:ro"
            - "./root-ca.pem:/usr/share/elasticsearch/config/root-ca.pem:ro"
            - "./internal_users.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml"
            - "./roles.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles.yml"
            # - "./roles_mapping.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles_mapping.yml"
            - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        environment:
            - cluster.name=reactome-elk
            - discovery.type=single-node
            - node.name=reactome-node-1
            - network.host=_site_
            - "ES_JAVA_OPTS=-Xms4g -Xmx20g"
            - "path.repo=/usr/share/elasticsearch/data/backups"
            - "search.max_buckets=1000000"
            - "JAVA_HOME=/usr/share/elasticsearch/jdk"
        ports:
            - "9200:9200"
            - "9300:9300"

    kibserver:
        build:
          context: .
          dockerfile: kibana.dockerfile
        volumes:
            - "./kibana.yaml:/usr/share/kibana/config/kibana.yml"
            - "./kibanadata:/usr/share/kibana/data"
            - "./root-ca.pem:/usr/share/kibana/config/root-ca.pem:ro"
            - "./admin.pem:/usr/share/kibana/config/admin.pem:ro"
            - "./admin-key.pem:/usr/share/kibana/config/admin-key.pem:ro"
        depends_on:
            - esserver
        ports:
            - 5601:5601

    logstash_server:
        build:
            context: .
            dockerfile: logstash.dockerfile
        volumes:
            - "./logstash.opts:/etc/init.d/logstash"
            - "./logstash.yaml:/usr/share/logstash/config/logstash.yml"
            - "./pipeline.conf:/usr/share/logstash/pipeline/logstash.conf"
            - "./logstash.patterns:/usr/share/logstash/pipeline/patterns/logstash.patterns"
            - "./analysis_service.patterns:/usr/share/logstash/pipeline/patterns/analysis_service.patterns"
            - "./content_service.patterns:/usr/share/logstash/pipeline/patterns/content_service.patterns"
            - "./referrers.patterns:/usr/share/logstash/pipeline/patterns/referrers.patterns"
            - "./logstashqueue:/var/queue"
            - "./ips_with_usage_types.csv:/ips.csv"
            - "./root-ca.pem:/etc/elasticsearch/certs/ca/root-ca.pem:ro"
        ports:
            - "5043:5043"
        depends_on:
            - esserver
        environment:
             - "LS_OPTS=--quiet"
             - LS_JAVA_OPTS=-Xmx3g

    # nginx is used as a proxy-pass. Set up your SSL certificates and keys, and pass them to nginx.
    # Then nginx will forward all requests on port 443 to port 5601 (or whever your kibana server is listening)
    nginx:
        depends_on:
            - esserver
            - kibserver
        links:
            - kibserver
        image: nginx:1.21.0-alpine
        ports:
            - 443:443
        environment:
            - NGINX_PORT=443
        volumes:
            - "./nginx.conf:/etc/nginx/nginx.conf:ro"
            - "./server.crt:/etc/nginx/conf.d/server.crt"
            - "./server.key:/etc/nginx/conf.d/server.key"
